(require 2htdp/image)

; Ian Turnbull
; hw02
; http://www.radford.edu/~itec380/2017fall-ibarland/Homeworks/hw02/hw02.html
;


; CRUST-WIDTH : -> non-negative real
; returns the width of the crust
;
(define CRUST-WIDTH 2)




; pizza-area : non-negative real -> non-negative real
; Return the area of a pizza, in sq.in., whose diameter is `d` (in inches).
;
(define (pizza-area d)
   (* pi (/ d 2) (/ d 2)))

(check-expect (pizza-area 0) 0)
(check-within (pizza-area 2) #i3.1415926535897932384626433   0.000000001)
(check-within (pizza-area 20) #i314.159   0.01)
(check-within (pizza-area 2.5) 4.91  0.01)
(check-within (pizza-area 1) (/ pi 4) 0.000000002)




; topping-area : non-negative real -> non-negative real
; returns the amount of pizza covered in topping (in square-inches), for a given diameter, 'd' (in inches)
; pizza diameter must be >= 4
;
(define (topping-area d)
  (pizza-area (- d (* CRUST-WIDTH 2))))

;(check-expect (topping-area 0) 0)
;(check-within (topping-area 1) 0.785 0.001)
(check-expect (topping-area 4) 0)
(check-within (topping-area 10) 28.274 0.01)
(check-within (topping-area 20) 201.0619 0.0001)
(check-within (topping-area 5) 0.7853981634 0.02)





; crust-area : non-negative real -> non-negative real
; returns the amount of the crust on a pizza (annulus), for a give diameter, 'd' (in inches)
; pizza diameter must be >= 4
; annulus is (outside area - inside area)
;
(define (crust-area d)
  (- (pizza-area d) (topping-area d)))

;(check-expect (crust-area 0) 0)
;(check-within (crust-area 1) 0.785 0.001)
(check-within (crust-area 4) 12.56637061 0.01)
(check-within (crust-area 10) 50.265 0.01)





; has-suffix? : non-empty-string non-empty-string -> boolean
; returns whether or not the first string ends with (the letters of) the second
;
(define (has-suffix? word letters)
  (string=? letters (substring word (- (string-length word) (string-length letters)))))

(check-expect (has-suffix? "world" "rld") #true)
(check-expect (has-suffix? "hi" "h") #false)
(check-expect (has-suffix? "wrong" "z") #false)
(check-expect (has-suffix? "99" "9") #true)
(check-expect (has-suffix? "all" "all") #true)
(check-expect (has-suffix? "UPPER" "er") #true)
(check-expect (has-suffix? "UpLoW" "Ow") #true)




#|

(define cnt 0)
(define word-to-lower null)
; to-lower : non-empty-string -> non-empty-string
; returns a string in all lower case
;
(define (to-lower word)
  (if (= cnt (string-length word))
      word
      (to-lower (string-append (string(char-downcase (string-ref word cnt)))
                               (substring word (+ cnt 1) (string-length word))))))
 
(check-expect (to-lower "UPPER") "upper")
(check-expect (to-lower "lower") "lower")
(check-expect (to-lower "MIxeD") "mixed")

|#




; make-doughnut : non-negative-real image-color? -> image?
; returns a doughnut for a given radius 'size and color 'color
;
(define (make-doughnut size color)
  (overlay (circle (/ size 4) 'solid 'white)
           (circle size 'solid color)))

(check-expect (make-doughnut 20 'brown) .)
(check-expect (make-doughnut 5 'green) (overlay (circle (/ 5 4) 'solid 'white)
         (circle 5 'solid 'green)))





; brown-doughnut : non-negative-real -> image?
; returns a brown doughnut for the give radius 'size
;
(define (brown-doughnut size)
  (make-doughnut size 'brown))

(check-expect (brown-doughnut 20) .)




; eyes : non-negative-real image-color -> image?
; returns two doughnuts side-by-side for the given radius and color
;
(define (eyes size color)
  (beside (make-doughnut size color)
          (make-doughnut size color)))

(check-expect (eyes 20 'brown).)
(check-expect (eyes 5 'yellow).)


; scale-to-width : image? image? -> image?
; Return `img`, but scaled so that it is as wide as `reference`.
; `img` must be non-zero-width (unless `reference` is also zero-width).
;
(define (scale-to-width img reference)
  (cond [(zero? (image-width reference)) empty-image]
        [(zero? (image-width img)) (error 'scale-to-width "Can't scale a 0-width image to a non-0-width.")]
        [else (scale (/ (image-width reference) (image-width img)) img)]))

(check-expect (scale-to-width (square 20 'solid 'red) (ellipse 0 5 'solid 'blue))
              empty-image)
(check-expect (scale-to-width (square 20 'solid 'red) (rectangle 20 5 'solid 'blue))
              (square 20 'solid 'red))
(check-expect (scale-to-width . .)
              .)
(check-expect (scale-to-width (square 20 'solid 'red) (ellipse 2 5 'solid 'blue))
              (square 2 'solid 'red))





; meme-creator : non-empty-string non-empty-string bitmap/url -> image?
; returns a meme with a top and bottom phrase with a provided url
;
(define (make-meme top bottom color url)
  (overlay/align 'center 'bottom
               (scale-to-width (text bottom 12 color)
                               (bitmap/url url))
               (overlay/align 'center 'top
                              (scale-to-width (text top 12 color)
                                              (bitmap/url url))
                              (bitmap/url url))))

(check-expect (make-meme "I had my patience tested."
                         "I'm negative."
                         'white
                         "https://imgflip.com/s/meme/Grumpy-Cat.jpg")
              .)




; super-cool-ski-instructor-meme : non-empty-string -> image?
; returns a super-cool-ski-instructor-meme with the given string 'phrase
;
(define (super-cool-ski-instructor-meme top)
  (make-meme (string-append "If you " top ",")
                "you're gonna have a bad time."
                'goldenrod
                "https://imgflip.com/s/meme/Super-Cool-Ski-Instructor.jpg"))

(check-expect (super-cool-ski-instructor-meme "spend all semester making memes") (overlay/align 'center 'bottom
               (scale-to-width (text "you're gonna have a bad time." 12 'goldenrod)
                               (bitmap/url "https://imgflip.com/s/meme/Super-Cool-Ski-Instructor.jpg"))
               (overlay/align 'center 'top
                              (scale-to-width (text (string-append "If you spend all semester making memes,") 12 'goldenrod)
                                              (bitmap/url "https://imgflip.com/s/meme/Super-Cool-Ski-Instructor.jpg"))
                              (bitmap/url "https://imgflip.com/s/meme/Super-Cool-Ski-Instructor.jpg"))))
(check-expect (super-cool-ski-instructor-meme "wait for the last minute to start a project")
              .)





; futurama-fry-meme : non-empty-string non-empty-string -> image?
; returns a futurama-fry-meme with the given phrases 'top 'bottom
;
(define (futurama-fry-meme top bottom)
  (make-meme (string-append "Not sure if " top ",")
                (string-append "or " bottom ".")
                'goldenrod
                "https://imgflip.com/s/meme/futurama-fry-meme.jpg"))

(check-expect (futurama-fry-meme "the image-library is easy"
                                 "Java's GUI library is hard")(overlay/align 'center 'bottom
               (scale-to-width (text (string-append "or Java's GUI library is hard.") 12 'goldenrod)
                               (bitmap/url "https://imgflip.com/s/meme/futurama-fry-meme.jpg"))
               (overlay/align 'center 'top
                              (scale-to-width (text (string-append "Not sure if the image-library is easy,") 12 'goldenrod)
                                              (bitmap/url "https://imgflip.com/s/meme/futurama-fry-meme.jpg"))
                              (bitmap/url "https://imgflip.com/s/meme/futurama-fry-meme.jpg"))))




; One-Does-Not-Simply : non-empty-string -> image?
; returns a One-Does-Not-Simply meme with the given string 'bottom
;
(define (One-Does-Not-Simply bottom)
  (make-meme "One Does Not Simply"
                bottom
                'white
                "https://imgflip.com/s/meme/One-Does-Not-Simply.jpg"))

(check-expect (One-Does-Not-Simply "Walk Into Mordor") (overlay/align 'center 'bottom
               (scale-to-width (text "Walk Into Mordor" 12 'white)
                               (bitmap/url "https://imgflip.com/s/meme/One-Does-Not-Simply.jpg"))
               (overlay/align 'center 'top
                              (scale-to-width (text "One Does Not Simply" 12 'white)
                                              (bitmap/url "https://imgflip.com/s/meme/One-Does-Not-Simply.jpg"))
                              (bitmap/url "https://imgflip.com/s/meme/One-Does-Not-Simply.jpg"))))